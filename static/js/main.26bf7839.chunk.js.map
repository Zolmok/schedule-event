{"version":3,"sources":["serviceWorker.js","reducers/date-scheduled.js","actions/date-scheduled.js","reducers/index.js","components/demo-complete/demo-complete.js","components/contact-form/contact-form.js","components/class-names.js","components/date-scheduled/date-scheduled.js","components/every-day-calendar/every-day-calendar.js","components/time-picker/time-picker.js","components/schedule-wizard/schedule-wizard.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","dateScheduledReducer","state","action","type","Object","assign","selection","schedule","time","date","rootReducer","combineReducers","DemoCompleteDom","props","dateSelected","onHome","onEmail","timeSelected","yourEmail","className","icon","faCheckCircle","data-testid","id","onClick","DemoComplete","setCurrentStep","useSelector","ContactForm","htmlFor","placeholder","required","ClassNames","names","list","Set","add","nameList","split","push","Array","isArray","i","length","newName","remove","name","delete","from","join","oldName","has","DateScheduledDom","renderSchedule","showTime","get","DateScheduled","EveryDayCalendarDom","handleDayClick","monday","onDayClick","firstDayOfWeek","EveryDayCalendar","dispatch","useDispatch","day","dayDate","moment","format","handleClick","currentTarget","innerText","TimePickerDom","halfHours","TimePicker","begin","hour","minute","second","interval","tabIndex","key","ScheduleWizardDom","backButtonDisabled","currentRightSide","currentStep","nextButtonDisabled","onNext","onPrevious","currentForm","faClock","disabled","faArrowLeft","ScheduleWizard","useState","setYourEmail","params","fields","document","querySelector","elements","slice","call","find","field","value","validity","valid","composeEnhancers","composeWithDevTools","store","createStore","App","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26bf7839.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport {UPDATE_DATE, UPDATE_TIME} from '../actions/date-scheduled';\n\nconst initialState = {\n  'schedule': {\n    'date': '',\n    'time': ''\n  }\n};\n\nfunction dateScheduledReducer(state = initialState, action) {\n  switch (action.type) {\n    case UPDATE_DATE:\n      return Object.assign(state, {\n        'schedule': {\n          'date': action.selection,\n          'time': state.schedule.time\n        }\n      });\n    case UPDATE_TIME:\n      return Object.assign(state, {\n        'schedule': {\n          'date': state.schedule.date,\n          'time': action.selection\n        }\n      });\n\n    default:\n      return state;\n    }\n}\n\nexport default dateScheduledReducer;\n","\nexport const UPDATE_DATE = 'UPDATE_DATE';\nexport const UPDATE_TIME = 'UPDATE_TIME';\n\nexport function updateDate(selection) {\n  return {\n    'type': UPDATE_DATE,\n    'selection': selection\n  };\n}\n\nexport function updateTime(selection) {\n  return {\n    'type': UPDATE_TIME,\n    'selection': selection\n  };\n}\n","\nimport {combineReducers} from 'redux';\nimport dateScheduledReducer from './date-scheduled';\n\nconst rootReducer = combineReducers({\n    dateScheduledReducer\n});\n\nexport default rootReducer;\n","import {faCheckCircle} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {useSelector} from 'react-redux';\n\nimport React from \"react\";\n\nimport './demo-complete.css';\n\nfunction onHome(setCurrentStep) {\n  setCurrentStep(1);\n}\n\nfunction onEmail(setCurrentStep) {\n  setCurrentStep(2);\n}\n\n/**\n * Create a component itself without having to deal with redux for testing.\n * https://redux.js.org/recipes/writing-tests/#components\n * > In order to be able to test the App component itself without having to deal with the decorator,\n * > we recommend you to also export the undecorated component\n */\nfunction DemoCompleteDom(props) {\n  const {dateSelected, onHome, onEmail, timeSelected, yourEmail} = props;\n\n  return (\n    <div className=\"container-full center\">\n      <FontAwesomeIcon className=\"check-icon fa-3x\" icon={faCheckCircle} />\n      <form>\n        <h2>We just scheduled a demo for you</h2>\n        <p className=\"info\">A calendar invitation for your upcoming demo session has been to your email ({yourEmail})</p>\n        <div className=\"appointment\">\n          <div className=\"appointment-row\">\n            <span className=\"item\">DATE</span>\n            <span className=\"item\">TIME</span>\n          </div>\n          <div className=\"appointment-row\">\n            <span className=\"item schedule\">{dateSelected}</span>\n            <span className=\"item schedule\">{timeSelected}</span>\n          </div>\n        </div>\n        <p>\n          <button className=\"primary\" data-testid=\"home\" id=\"home\" onClick={onHome}>Get back home</button>\n        </p>\n        <p>\n          <button className=\"link\" id=\"email\" onClick={onEmail}>Resend Email</button>\n        </p>\n      </form>\n    </div>\n  );\n}\n\nfunction DemoComplete(props) {\n  const {setCurrentStep, yourEmail} = props;\n  const dateSelected = useSelector((state) => {\n    return state.dateScheduledReducer.schedule.date;\n  });\n  const timeSelected = useSelector((state) => {\n    return state.dateScheduledReducer.schedule.time || 'Please select';\n  });\n  const onHomeCurried = () => onHome(setCurrentStep);\n  const onEmailCurried = () => onEmail(setCurrentStep);\n\n  return <DemoCompleteDom\n           dateSelected={dateSelected}\n           onHome={onHomeCurried}\n           onEmail={onEmailCurried}\n           timeSelected={timeSelected}\n           yourEmail={yourEmail} />;\n}\n\nexport {DemoComplete, DemoCompleteDom};\n","import React from 'react';\n\nimport './contact-form.css';\n\nfunction ContactForm(props) {\n  return (\n    <div>\n      <p className=\"info-heading\">Enter your information</p>\n      <p className=\"heading\">Personal Information</p>\n      <div className=\"form-group\">\n        <label htmlFor=\"name\">Your name</label>\n        <input type=\"text\" id=\"name\" placeholder=\"Please enter your full name\" required />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"email\">Your e-mail address</label>\n        <input type=\"email\" id=\"email\" placeholder=\"Please enter your e-mail address\" required />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"phone\">Phone number</label>\n        <input type=\"phone\" id=\"phone\" placeholder=\"Please enter your phone number\" required />\n      </div>\n    </div>\n  );  \n}\n\nexport default ContactForm;\n","\n/**\n * Handle the manipulation of a list of classes.\n * Will ensure that the list has no duplicates, and takes care\n * of spacing.\n *\n * Usage:\n *\n * const classOne = classNames();\n * const classTwo = classNames('guz', 'gez', 'goz');\n *\n * classOne.add('foo bar baz');\n * classOne.add(['bez', 'buz', 'boz']);\n * classOne.remove('buz');\n * classOne.replace('foo', 'fuz');\n * classOne.get();\n *\n * @param {String|Number|Array} [names] - list of classes\n * @returns {Object} - list of functions available\n */\nexport default function ClassNames(names) {\n  let list = new Set();\n\n  /**\n   * Add class names to the set\n   *\n   * @param {String|Array} names - list of classes\n   */\n  function add(names) {\n    let nameList = [];\n\n    if (typeof names === 'string') {\n      nameList = names.split(' ');\n    }\n\n    if (typeof names === 'number') {\n      nameList.push(names);\n    }\n\n    if (Array.isArray(names)) {\n      nameList = names;\n    }\n\n    for (let i = 0; i < nameList.length; i++) {\n      const newName = nameList[i];\n\n      list.add(newName);\n    }\n  }\n\n  /**\n   * @returns {String} - Returns a space seperated list of class names\n   */\n  function get() {\n    return Array.from(list).join(' ');\n  }\n\n  /**\n   * Remove given class name from the list\n   *\n   * @param {String} name - name to remove from the list\n   */\n  function remove(name) {\n    list.delete(name);\n  }\n\n  /**\n   * Replace given class name in the list\n   *\n   * @param {String} oldName - the name to replace\n   * @param {String} newName - the name to replace with\n   */\n  function replace(oldName, newName) {\n    if (list.has(oldName)) {\n      remove(oldName);\n      add(newName);\n    }\n  }\n\n  if (names) {\n    add(names);\n  }\n\n  return {\n    'add': add,\n    'get': get,\n    'remove': remove,\n    'replace': replace\n  };\n}\n","import {useSelector} from 'react-redux';\n\nimport ClassNames from '../class-names';\nimport React from \"react\";\n\nimport \"./date-scheduled.css\";\n\nfunction DateScheduledDom(props) {\n  const {\n    renderSchedule,\n    dateSelected,\n    showTime,\n    timeSelected\n  } = props;\n\n  return (\n    <div className={renderSchedule.get()}>\n      <p className=\"card-title\">DATE</p>\n      <p className=\"card-body card-chosen\">{dateSelected}</p>\n      <p className=\"card-title\">TIME</p>\n      <p className={showTime.get()}>{timeSelected}</p>\n    </div>\n  );\n}\n\nfunction DateScheduled() {\n  const dateSelected = useSelector((state) => {\n    return state.dateScheduledReducer.schedule.date;\n  });\n  const timeSelected = useSelector((state) => {\n    return state.dateScheduledReducer.schedule.time || 'Please select';\n  });\n\n  let renderSchedule = new ClassNames('card-schedule');\n  let showTime = new ClassNames('card-body card-muted');\n\n  if (dateSelected) {\n    renderSchedule.add('animate-schedule');\n  }\n  if (timeSelected !== 'Please select') {\n    showTime.add('show-time');\n  }\n\n  return <DateScheduledDom renderSchedule={renderSchedule}\n                           dateSelected={dateSelected}\n                           showTime={showTime}\n                           timeSelected={timeSelected} />;\n}\n\nexport {DateScheduled, DateScheduledDom};\n","import moment from 'moment';\n\nimport {updateDate} from '../../actions/date-scheduled';\nimport {useDispatch} from 'react-redux';\n\nimport DayPicker from \"react-day-picker\";\nimport React from 'react';\n\nimport \"react-day-picker/lib/style.css\";\nimport \"./every-day-calendar.css\";\n\n\nfunction handleDayClick(dispatch, day) {\n  dispatch(updateDate(day));\n}\n\nfunction EveryDayCalendarDom(props) {\n  const {handleDayClick, monday} = props;\n\n  return (\n    <div className=\"every-day-calendar\">\n      <p className=\"info-heading\">Select date and time</p>\n      <DayPicker\n        onDayClick={handleDayClick}\n        firstDayOfWeek={monday}\n      />\n    </div>\n  );\n}\n\nfunction EveryDayCalendar() {\n  const dispatch = useDispatch();\n  const handleDayClickCurried = (day) => {\n    const dayDate = moment(day).format('MMMM D, YYYY');\n\n    handleDayClick(dispatch, dayDate);\n  };\n  const monday = 1;\n\n  return <EveryDayCalendarDom handleDayClick={handleDayClickCurried} monday={monday} />;\n}\n\nexport {EveryDayCalendar, EveryDayCalendarDom};\n","import {updateTime} from '../../actions/date-scheduled';\nimport {useDispatch} from 'react-redux';\n\nimport moment from 'moment';\nimport React from \"react\";\n\nimport './time-picker.css';\n\nfunction handleClick(dispatch, time) {\n  dispatch(updateTime(time.currentTarget.innerText));\n}\n\nfunction TimePickerDom(props) {\n  const {halfHours} = props;\n\n  return (\n    <div className=\"time-picker-wrapper\">\n      <ul className=\"time-picker\">{halfHours}</ul>\n    </div>\n  );\n}\n\nfunction TimePicker() {\n  const begin = moment();\n  const halfHours = [];\n  const dispatch = useDispatch();\n\n  begin.hour(0);\n  begin.minute(0);\n  begin.second(0);\n\n  for (let interval = 0; interval < 48; interval++) {\n    const time = begin.format('h:mm a');\n    const handleClickCurried = (time) => {\n      handleClick(dispatch, time);\n    };\n\n    let tabIndex = -1;\n\n    if (interval === 0) {\n      tabIndex = 10;\n    }\n\n    halfHours.push(<li key={interval} onClick={handleClickCurried} tabIndex={tabIndex}>{time}</li>);\n    begin.add(30, 'm');\n  }\n\n  return <TimePickerDom halfHours={halfHours} />;\n}\n\nexport {TimePicker, TimePickerDom};\n","import {faArrowLeft, faClock} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {useSelector} from 'react-redux';\n\nimport React, {useState} from \"react\";\n\nimport {DemoComplete} from '../demo-complete/demo-complete';\nimport ContactForm from '../contact-form/contact-form';\nimport {DateScheduled} from '../date-scheduled/date-scheduled';\nimport {EveryDayCalendar} from '../every-day-calendar/every-day-calendar';\nimport {TimePicker} from '../time-picker/time-picker';\n\nimport \"./schedule-wizard.css\";\n\n/**\n * Advance to the next step of the wizard\n *\n * @param {Object} params - step state and email cached for the final step\n */\nfunction onNext(params) {\n  const {currentStep, setCurrentStep, setYourEmail} = params;\n\n  if (currentStep > 1) {\n    if (currentStep === 2) { // e-mail form\n      // validate email form\n      const fields = document.querySelector('form').elements;\n      const invalidFields = [].slice.call(fields).find((field) => {\n        if (field.id === 'email') {\n          setYourEmail(field.value);\n        }\n\n        return field.validity.valid === false;\n      });\n\n      if (invalidFields) {\n        return; // stay on step 2, the e-mail form, until form is valid\n      }\n    }\n\n    setCurrentStep(3); // final step, schedule complete\n  } else {\n    setCurrentStep(currentStep + 1);\n  }\n}\n\n/**\n * Move back to previous step of the wizard\n *\n * @param {Number} currentStep - step the wizard is currently on\n * @param {Object} setCurrentStep - set the step of the wizard\n */\nfunction onPrevious(currentStep, setCurrentStep) {\n  if (currentStep <= 1) {\n    setCurrentStep(1);\n  } else {\n    setCurrentStep(currentStep - 1);\n  }\n}\n\n/**\n * Create a component itself without having to deal with redux for testing.\n * https://redux.js.org/recipes/writing-tests/#components\n * > In order to be able to test the App component itself without having to deal with the decorator,\n * > we recommend you to also export the undecorated component\n */\nfunction ScheduleWizardDom(props) {\n  const {\n    backButtonDisabled,\n    currentRightSide,\n    currentStep,\n    DateScheduled,\n    DemoComplete,\n    nextButtonDisabled,\n    onNext,\n    onPrevious,\n    setCurrentStep,\n    yourEmail\n  } = props;\n\n  let currentForm = (\n    <form>\n      <div className=\"container\">\n        <div className=\"left\">\n          <div className=\"row-left\">\n            <div className=\"top\">\n              <p className=\"info-heading\">Walkthrough</p>\n              <p className=\"heading\">Schedule a demo</p>\n              <div className=\"tag-duration\">\n                <FontAwesomeIcon icon={faClock} /> <span>10-20min</span>\n              </div>\n            </div>\n            <div className=\"bottom\">\n              <DateScheduled />\n            </div>\n          </div>\n        </div>\n        <div className=\"right\">\n          {currentRightSide}\n        </div>\n      </div>\n      <div className=\"footer\">\n        <button disabled={backButtonDisabled}\n                onClick={onPrevious}\n                type=\"button\"><FontAwesomeIcon icon={faArrowLeft} /> Back</button>\n        <button className=\"primary\"\n                data-testid=\"on-next\"\n                disabled={nextButtonDisabled}\n                onClick={onNext}\n                tabIndex=\"15\"\n                type=\"submit\">Next Step</button>\n      </div>\n    </form>\n  );\n\n  if (currentStep === 3) { // final step, confirmation screen\n    currentForm = <DemoComplete setCurrentStep={setCurrentStep} yourEmail={yourEmail} />;\n  }\n\n  return currentForm;\n}\n\n/**\n * A basic wizard to step through 3 states:\n * 1) The initial scheduling screen, shows date and time pickers\n * 2) Collect information screen to email schedule details\n * 3) Final screen with confirmation information\n */\nfunction ScheduleWizard() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [yourEmail, setYourEmail] = useState('');\n  const onNextCurried = () => onNext({currentStep, setCurrentStep, setYourEmail});\n  const onPreviousCurried = () => onPrevious(currentStep, setCurrentStep);\n\n  let currentRightSide = [];\n  let backButtonDisabled = true;\n  let nextButtonDisabled = true;\n\n  switch (currentStep) {\n    case 1:\n      currentRightSide = (\n        <div className=\"row-right\">\n          <EveryDayCalendar />\n          <TimePicker />\n        </div>\n      );\n      backButtonDisabled = true;\n      nextButtonDisabled = true;\n      break;\n    case 2:\n      currentRightSide = (\n        <div className=\"row-right\">\n          <ContactForm />\n        </div>\n      );\n      backButtonDisabled = false;\n      nextButtonDisabled = false;\n      break;\n\n    default:\n      break;\n  }\n\n  const dateSelected = useSelector((state) => {\n    return state.dateScheduledReducer.schedule.date;\n  });\n  const timeSelected = useSelector((state) => {\n    return state.dateScheduledReducer.schedule.time;\n  });\n\n  if (dateSelected && timeSelected) {\n    nextButtonDisabled = false;\n  }\n\n  return <ScheduleWizardDom\n           backButtonDisabled={backButtonDisabled}\n           currentRightSide={currentRightSide}\n           currentStep={currentStep}\n           DateScheduled={DateScheduled}\n           DemoComplete={DemoComplete}\n           nextButtonDisabled={nextButtonDisabled}\n           onNext={onNextCurried}\n           onPrevious={onPreviousCurried}\n           setCurrentStep={setCurrentStep}\n           yourEmail={yourEmail} />;\n}\n\nexport {ScheduleWizard, ScheduleWizardDom};\n","import {createStore} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport {Provider} from 'react-redux';\n\nimport React from 'react';\nimport rootReducer from './reducers/index';\n\nimport './normalize.css';\nimport './App.css';\n\nimport {ScheduleWizard} from './components/schedule-wizard/schedule-wizard';\n\nconst composeEnhancers = composeWithDevTools({\n    // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst store = createStore(rootReducer, composeEnhancers());\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ScheduleWizard />\n    </Provider>\n  );\n}\n\nexport default App;\n","import {render} from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport React from 'react';\n\nimport './index.css';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}